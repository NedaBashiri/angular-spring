{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.authService.isAuthenticated().then(auth => {\n      if (auth) {\n        return true;\n      } else {\n        this.router.navigate(['/not-found']);\n      }\n    });\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAC5D;EAEAC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,OAAO,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,CACtCC,IAAI,CAAEC,IAAa,IAAI;MACtB,IAAIA,IAAI,EAAE;QACR,OAAO,IAAI;OACZ,MAAM;QACL,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;IAExC,CAAC,CAAC;EACN;;AAfWV,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAW,SAATX,SAAS;EAAAY,YAFR;AAAM","names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","then","auth","navigate","factory","providedIn"],"sourceRoot":"","sources":["G:\\Programming\\Angular\\project\\22-Routing Guards (canActivate) گاردهای روتینگ قسمت اول\\routingGuards\\src\\app\\auth.guard.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {AuthService} from \"./auth.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.authService.isAuthenticated()\n      .then((auth: boolean) => {\n        if (auth) {\n          return true;\n        } else {\n          this.router.navigate(['/not-found'])\n        }\n      });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}